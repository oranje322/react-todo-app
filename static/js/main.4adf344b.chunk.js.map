{"version":3,"sources":["Components/Sidebar/List.jsx","Components/Sidebar/AddNewButtonList.jsx","Redux/Reducers/reducer.js","Components/Sidebar/Sidebar.jsx","Components/Tasks/TaskItem.jsx","Components/Tasks/EmptyTasks.jsx","Components/Tasks/Tasks.jsx","App.js","serviceWorker.js","Redux/store.js","index.js"],"names":["ListItem","name","color","id","onClickListItem","index","isActive","onDeleteItemList","clickAllTasks","ref","useRef","onClick","e","current","contains","target","className","cn","active","listHeader","circle","onClickDeleteItem","width","height","viewBox","fill","xmlns","d","AddNewButtonList","onClickClosePopup","onAddNewItemList","itemsLength","useState","activeSelectColor","setActiveSelectColor","inputValue","setInputValue","selectColorMass","onChange","value","changeInput","type","placeholder","map","onClickSelectColor","key","circle__active","obj","tasks","initialState","items","listItem","task","isCompleted","activeListItem","isShowAllTasks","showAllTasks","Sidebar","visiblePopup","setVisiblePop","dispatch","useDispatch","sidebarItems","useSelector","state","payload","list","stroke","strokeWidth","strokeLinecap","strokeLinejoin","undefined","alert","length","TaskItem","data","onCheckTask","wasRender","onDeleteTaskItem","onEditTask","taskValue","setTaskValue","visibleTaskInput","setVisibleTaskInput","useEffect","checked","htmlFor","onChangeInputTask","onBlur","autoFocus","onDoubleClick","EmptyTasks","Tasks","visibleInput","setVisibleInput","visibleAddTaskBtn","setVisibleAddTaskBtn","visibleSendTaskBtn","setVisibleSendTaskBtn","allTasks","sidebarList","tasksList","titleName","titleNameInput","setTitleNameInput","visibleTitleNameInput","setVisibleTitleNameInput","zxc","taskId","deleteTask","editTask","openTitleNameInput","onChangeTitleName","console","log","editItemList","changeInputValue","App","Boolean","window","location","hostname","match","store","createStore","action","item","newItems","filter","flat","oldTasksMass","newTasksMass","newItemsMass","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4adf344b.chunk.js","sourcesContent":["import React, {useRef} from \"react\";\r\nimport cn from 'classnames'\r\nimport './List.scss'\r\n\r\n\r\nconst ListItem = ({name, color, id, onClickListItem, index, isActive, onDeleteItemList, clickAllTasks}) => {\r\n\r\n    const ref = useRef()\r\n\r\n\r\n    const onClickShowAllTasks = () => {\r\n\r\n        if(index !== 0) {\r\n            return\r\n        }\r\n        clickAllTasks()\r\n    }\r\n    const onClick = (e) => {\r\n        if (!ref.current.contains(e.target)) {\r\n            onClickListItem(index)\r\n        }\r\n        }\r\n\r\n\r\n\r\n    const onClickDeleteItem = (e) => {\r\n        if (ref.current.contains(e.target)) {\r\n            onDeleteItemList(id)\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n\r\n        <div onClick={ (e) => onClick(e)} className={cn('listItem', {active: isActive}, {listHeader: index === 0})}>\r\n            <div onClick={onClickShowAllTasks} className={'listItemWrap'}>\r\n                <div className={cn(color,{circle: index !== 0})}></div>\r\n                <p className=\"categoryText\">{name}</p>\r\n            </div>\r\n\r\n            <div  ref={ref}  onClick={(e)=> onClickDeleteItem(e)}>\r\n                <svg width=\"10\" height=\"10\" viewBox=\"0 0 10 10\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M6.24741 5L9.73899 1.50842C9.9047 1.343 9.99791 1.11853 9.99812 0.884393C9.99832 0.650251 9.90551 0.425617 9.74009 0.259907C9.57468 0.0941973 9.35021 0.000986589 9.11606 0.000779811C8.88192 0.000573033 8.65729 0.0933872 8.49158 0.258804L5 3.75038L1.50842 0.258804C1.34271 0.0930948 1.11796 0 0.883613 0C0.649264 0 0.424514 0.0930948 0.258804 0.258804C0.0930948 0.424514 0 0.649264 0 0.883613C0 1.11796 0.0930948 1.34271 0.258804 1.50842L3.75038 5L0.258804 8.49158C0.0930948 8.65729 0 8.88204 0 9.11639C0 9.35074 0.0930948 9.57549 0.258804 9.7412C0.424514 9.90691 0.649264 10 0.883613 10C1.11796 10 1.34271 9.90691 1.50842 9.7412L5 6.24962L8.49158 9.7412C8.65729 9.90691 8.88204 10 9.11639 10C9.35074 10 9.57549 9.90691 9.7412 9.7412C9.90691 9.57549 10 9.35074 10 9.11639C10 8.88204 9.90691 8.65729 9.7412 8.49158L6.24741 5Z\" fill=\"#E3E3E3\"/>\r\n                </svg>\r\n            </div>\r\n\r\n\r\n        </div>\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default ListItem","import React, {useState} from \"react\";\r\nimport cn from 'classnames'\r\nimport './AddNewButtonList.scss'\r\n\r\nconst AddNewButtonList = ( {onClickClosePopup, onAddNewItemList, itemsLength}) => {\r\n\r\n    const [activeSelectColor, setActiveSelectColor] = useState(false);\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n\r\n    const changeInput = (e) => {\r\n        const value = e.target.value\r\n        setInputValue(value)\r\n    }\r\n\r\n    const onClickSelectColor = (index) => {\r\n        setActiveSelectColor(index)\r\n    }\r\n\r\n    const onClickAddNewItem = () => {\r\n        const obj = {\r\n            id: itemsLength,\r\n            name: inputValue,\r\n            color: selectColorMass[activeSelectColor],\r\n            tasks: []\r\n        }\r\n        onAddNewItemList(obj);\r\n        setInputValue('')\r\n        onClickClosePopup()\r\n    }\r\n\r\n    const selectColorMass = ['green', 'orange', 'red', 'blue', 'indigo']\r\n\r\n    return (\r\n        <div className={'addListPopup'}>\r\n            <div className=\"popupInput\">\r\n                <input onChange={ (e) => changeInput(e) } value={inputValue} className={'field'} type=\"text\" placeholder={'Название папки'}/>\r\n            </div>\r\n            <div className=\"selectColor\">\r\n                {\r\n                    selectColorMass.map((color, index) => <div onClick={ () => onClickSelectColor(index)} key={color + index} className={cn(color, 'circle', {circle__active: activeSelectColor === index} )}></div>)\r\n                }\r\n            </div>\r\n\r\n            <button onClick={onClickAddNewItem}>\r\n        Сохранить\r\n            </button>\r\n\r\n            <div onClick={onClickClosePopup} className=\"krest\">\r\n\r\n                <svg width=\"21\" height=\"21\" viewBox=\"0 0 21 21\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M10.315 0C4.62737 0 0 4.62737 0 10.315C0 16.0026 4.62737 20.63 10.315 20.63C16.0026 20.63 20.63 16.0026 20.63 10.315C20.63 4.62737 16.0026 0 10.315 0ZM14.0497 12.928C14.1265 13.0009 14.1879 13.0885 14.2303 13.1855C14.2727 13.2826 14.2952 13.3872 14.2966 13.4931C14.298 13.599 14.2781 13.7041 14.2382 13.8022C14.1983 13.9003 14.1392 13.9894 14.0643 14.0643C13.9894 14.1392 13.9003 14.1983 13.8022 14.2382C13.7041 14.2781 13.599 14.298 13.4931 14.2966C13.3872 14.2952 13.2826 14.2727 13.1855 14.2303C13.0885 14.1879 13.0009 14.1265 12.928 14.0497L10.315 11.4373L7.70203 14.0497C7.55202 14.1922 7.35226 14.2705 7.14536 14.2679C6.93846 14.2652 6.74077 14.1819 6.59446 14.0355C6.44814 13.8892 6.36477 13.6915 6.36212 13.4846C6.35947 13.2777 6.43775 13.078 6.58028 12.928L9.19275 10.315L6.58028 7.70203C6.43775 7.55202 6.35947 7.35226 6.36212 7.14536C6.36477 6.93846 6.44814 6.74077 6.59446 6.59446C6.74077 6.44814 6.93846 6.36477 7.14536 6.36212C7.35226 6.35947 7.55202 6.43775 7.70203 6.58028L10.315 9.19275L12.928 6.58028C13.078 6.43775 13.2777 6.35947 13.4846 6.36212C13.6915 6.36477 13.8892 6.44814 14.0355 6.59446C14.1819 6.74077 14.2652 6.93846 14.2679 7.14536C14.2705 7.35226 14.1922 7.55202 14.0497 7.70203L11.4373 10.315L14.0497 12.928Z\" fill=\"#5C5C5C\"/>\r\n                </svg>\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddNewButtonList","const SET_ITEMS_LIST = 'SET_ITEMS_LIST'\r\nconst EDIT_ITEM_LIST = 'EDIT_ITEM_LIST'\r\nconst DELETE_ITEM_LIST = 'DELETE_ITEM_LIST'\r\nconst SET_ACTIVE_ITEM_LIST = 'SET_ACTIVE_ITEM_LIST'\r\n\r\nconst SET_TASKS = 'SET_TASKS'\r\nconst EDIT_TASK = 'EDIT_TASK'\r\nconst DELETE_TASK = 'DELETE_TASK'\r\nconst CHECK_TASK = 'CHECK_TASK'\r\n\r\nconst SHOW_ALL_TASKS = 'SHOW_ALL_TASKS'\r\n\r\nconst initialState = {\r\n    items: [{id: 0, name: 'Все задачи', color: '', tasks: []},\r\n        {id: 1, name: 'Покупки', color: 'green', tasks: [\r\n            {listItem: 1, id: 0, task: 'Купить колбасы', isCompleted: true},\r\n            {listItem: 1, id: 1, task: 'Купить молока', isCompleted: false}\r\n        ]},\r\n        {id: 2, name: 'Книги', color: 'orange', tasks: [\r\n                {listItem: 2, id: 0, task: 'Прочитать Гарри Поттера', isCompleted: true}\r\n            ]},\r\n        {id: 3, name: 'Сериалы', color: 'red', tasks : [\r\n                {listItem: 3, id: 0, task: 'Посмотреть House M.D.', isCompleted: false}\r\n            ]},\r\n        {id: 4, name: 'Учеба', color: 'blue', tasks: [\r\n                {listItem: 4, id: 0, task: 'Выучить JS', isCompleted: true},\r\n                {listItem: 4, id: 1, task: 'Выучить React', isCompleted: true},\r\n            ]},\r\n        {id: 5, name: 'Разное', color: 'indigo', tasks: [\r\n                {listItem: 5, id: 0, task: 'Убраться в комнате', isCompleted: false},\r\n            ]}],\r\n    activeListItem: 1,\r\n    isShowAllTasks: false,\r\n    showAllTasks: [{listItem: 1, id: 0, task: \"Купить колбасы\", isCompleted: true},\r\n{listItem: 1, id: 1, task: \"Купить молока\", isCompleted: false},\r\n{listItem: 2, id: 0, task: \"Прочитать Гарри Поттера\", isCompleted: true},\r\n{listItem: 3, id: 0, task: \"Посмотреть House M.D.\", isCompleted: false},\r\n{listItem: 4, id: 0, task: \"Выучить JS\", isCompleted: true},\r\n{listItem: 4, id: 1, task: \"Выучить React\", isCompleted: true},\r\n{listItem: 5, id: 0, task: \"Убраться в комнате\", isCompleted: false}]\r\n}\r\n\r\n\r\nexport const reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_ITEMS_LIST:\r\n            return {\r\n                ...state,\r\n                items: [...state.items, action.payload]\r\n            }\r\n        case EDIT_ITEM_LIST:\r\n        return  {\r\n            ...state,\r\n            items: state.items.map(item => {\r\n                    if(item.id === action.payload.id) {\r\n                        const newItem = {\r\n                            id: action.payload.id,\r\n                            name: action.payload.name,\r\n                            color: action.payload.color,\r\n                            tasks: action.payload.tasks\r\n                        }\r\n                        return newItem\r\n                    } else {\r\n                        return item\r\n                    }\r\n                }\r\n            )\r\n        }\r\n\r\n        case DELETE_ITEM_LIST: {\r\n            let newItems = state.items.filter(obj => obj.id !== action.payload)\r\n\r\n\r\n            return {\r\n                ...state,\r\n                items: newItems,\r\n                showAllTasks: [...newItems.map(task => task.tasks)].flat()\r\n            }\r\n        }\r\n        case SET_ACTIVE_ITEM_LIST:\r\n\r\n            return {\r\n                ...state,\r\n                activeListItem: action.payload,\r\n                isShowAllTasks: action.payload === 0 ? true : false\r\n\r\n\r\n            }\r\n        case SET_TASKS: {\r\n            const oldTasksMass = [...state.items[action.payload.listItem].tasks]\r\n            const newTasksMass = [...oldTasksMass, action.payload]\r\n\r\n            return {\r\n                ...state,\r\n                items: state.items.map(item => {\r\n                    if(item.id !== action.payload.listItem) {\r\n                        return item\r\n                    } else {\r\n                        const newItem = {...item, tasks: newTasksMass};\r\n                        return newItem\r\n                    }\r\n                })\r\n            }\r\n        }\r\n\r\n        case EDIT_TASK: {\r\n            const newItemsMass = state.items.map(item => {\r\n                if (item.id !== action.payload.listItem) {\r\n                    return item\r\n                } else {\r\n                    const newItem = {\r\n                        id: item.id,\r\n                        name: item.name,\r\n                        color: item.color,\r\n                        tasks: item.tasks.map(task => {\r\n                            if(task.id === action.payload.id) {\r\n                                const newTask = {\r\n                                    id: action.payload.id,\r\n                                    listItem: action.payload.listItem,\r\n                                    isCompleted: action.payload.isCompleted,\r\n                                    task: action.payload.task\r\n                                }\r\n                                return newTask\r\n                            } else {\r\n                                return task\r\n                            }\r\n                        })\r\n                    }\r\n                    return newItem\r\n                }\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                items: newItemsMass,\r\n                showAllTasks: [...newItemsMass.map(task => task.tasks)].flat()\r\n            }\r\n        }\r\n\r\n        case DELETE_TASK: {\r\n\r\n            const newItemsMass = state.items.map(item => {\r\n                if(item.id !== action.payload.listItem) {\r\n                    return item\r\n                } else {\r\n                    const newItem = {\r\n                        id: item.id,\r\n                        name: item.name,\r\n                        color: item.color,\r\n                        tasks: item.tasks.filter(task => task.id !== action.payload.id)\r\n\r\n                    }\r\n                    return newItem\r\n\r\n                }\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                items: newItemsMass,\r\n                showAllTasks: [...newItemsMass.map(task => task.tasks)].flat()\r\n            }\r\n        }\r\n\r\n\r\n        case CHECK_TASK: {\r\n\r\n            const newItemsMass = state.items.map(item => {\r\n                if(item.id !== action.payload.wasRender) {\r\n                    return item\r\n                } else {\r\n                    const newTasksMass = item.tasks.map(task => {\r\n                        if(task.id === action.payload.taskId) {\r\n                            return {\r\n                                listItem: action.payload.wasRender,\r\n                                id: task.id,\r\n                                task: task.task,\r\n                                isCompleted: !task.isCompleted\r\n                            }\r\n                        } else {\r\n                            return task\r\n                        }\r\n                    })\r\n\r\n                    const newItem =  {...item, tasks: [...newTasksMass]}\r\n\r\n                    return newItem\r\n\r\n                }\r\n            })\r\n\r\n            return {\r\n                ...state,\r\n                items: newItemsMass,\r\n                showAllTasks: [...newItemsMass.map(task => task.tasks)].flat()\r\n\r\n            }}\r\n        case SHOW_ALL_TASKS:\r\n            return {\r\n                ...state,\r\n                isShowAllTasks: true,\r\n                showAllTasks: [...state.items.map(task => task.tasks)].flat(),\r\n            }\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport const setItemsList = (payload) => ({type: SET_ITEMS_LIST, payload})\r\nexport const editItemList = payload => ({type: EDIT_ITEM_LIST, payload})\r\nexport const deleteItemsList = payload => ({type: DELETE_ITEM_LIST, payload})\r\nexport const setActiveItemList = payload => ({type: SET_ACTIVE_ITEM_LIST, payload})\r\n\r\nexport const setTasks = (payload) => ({type:SET_TASKS, payload})\r\nexport const editTask = payload => ({type:EDIT_TASK, payload})\r\nexport const deleteTask = payload => ({type:DELETE_TASK, payload})\r\nexport const checkTask = (payload) => ({type:CHECK_TASK, payload})\r\n\r\nexport const showAllTasks = () => ({type:SHOW_ALL_TASKS})","import React, {useState} from \"react\";\r\nimport ListItem from \"./List\";\r\nimport './List.scss'\r\nimport AddNewButtonList from \"./AddNewButtonList\";\r\nimport {deleteItemsList, setItemsList, setActiveItemList, showAllTasks} from \"../../Redux/Reducers/reducer\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\n\r\nconst Sidebar = () => {\r\n    const [visiblePopup, setVisiblePop] = useState(false);\r\n\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const sidebarItems = useSelector(state => state.items)\r\n    const activeListItem = useSelector(state => state.activeListItem)\r\n\r\n\r\n\r\n    const onClickListItem = (index) => {\r\n        dispatch(setActiveItemList(index))\r\n\r\n    }\r\n\r\n    const onClickAddNewFolder = () => {\r\n        setVisiblePop(true)\r\n    }\r\n\r\n    const onClickClosePopup = () => {\r\n        setVisiblePop(false)\r\n    }\r\n\r\n    const clickAllTasks = () => {\r\n        dispatch(showAllTasks())\r\n    }\r\n\r\n    const onAddNewItemList = (obj) => {\r\n        if(obj.name === '' || obj.color === undefined) {\r\n            alert('Введите название папки и цвет');\r\n            return\r\n        }\r\n        dispatch(setItemsList(obj))\r\n\r\n    }\r\n\r\n    const onDeleteItemList = (id) => {\r\n        dispatch(deleteItemsList(id))\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={'todo__sidebar'}>\r\n            <div className=\"list\">\r\n                <div className=\"list__body\">\r\n                    {\r\n                        sidebarItems.map((list, index) => <ListItem index={index}\r\n                                                            onClickListItem={onClickListItem}\r\n                                                            name={list.name}\r\n                                                            color={list.color}\r\n                                                            id={list.id}\r\n                                                            key={'list_'+index}\r\n                        isActive={activeListItem === index}\r\n                                                            onDeleteItemList={onDeleteItemList}\r\n                                                                    clickAllTasks={clickAllTasks}/>)\r\n                    }\r\n                </div>\r\n                <div className=\"list__footer\">\r\n                    <button onClick={onClickAddNewFolder}>\r\n                        <svg width=\"12\" height=\"12\" viewBox=\"0 0 12 12\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M6 1V11\" stroke=\"#868686\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                            <path d=\"M1 6H11\" stroke=\"#868686\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                        </svg>\r\n                        <p className=\"list__footerText\">Добавить папку</p>\r\n                    </button>\r\n\r\n                    {\r\n                        visiblePopup && <AddNewButtonList onClickClosePopup={onClickClosePopup} onAddNewItemList={onAddNewItemList} itemsLength={sidebarItems.length}  />\r\n                    }\r\n\r\n\r\n\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","import React, {useEffect, useState} from \"react\";\r\n\r\nconst TaskItem = ({data, onCheckTask, wasRender, onDeleteTaskItem, onEditTask}) => {\r\n\r\n    const {task, isCompleted, id, listItem} = data;\r\n\r\n    const [taskValue, setTaskValue] = useState(task)\r\n    const [visibleTaskInput, setVisibleTaskInput] = useState(false)\r\n\r\n    useEffect( () => {\r\n        setTaskValue(task)\r\n    }, [task])\r\n\r\n\r\n\r\n    const onChangeCheckbox = () => {\r\n        const obj = {\r\n            id, wasRender\r\n        }\r\n        onCheckTask(obj)\r\n    }\r\n\r\n    const onClickDeleteTaskItem = () => {\r\n        const obj = {\r\n            id, listItem\r\n        }\r\n        onDeleteTaskItem(obj)\r\n    }\r\n\r\n    const onChangeInputTask = (e) => {\r\n        setTaskValue(e.target.value)\r\n    }\r\n\r\n    const changeInputToRedux = () => {\r\n        const obj = {\r\n            task: taskValue,\r\n            id,\r\n            listItem,\r\n            isCompleted\r\n        }\r\n        onEditTask(obj)\r\n        setVisibleTaskInput(false)\r\n    }\r\n\r\n    const doubleClickOnTaskItem = () => {\r\n        setVisibleTaskInput(true)\r\n    }\r\n\r\n    return (\r\n\r\n\r\n        <div className=\"tasks__item\">\r\n            <div className={'taskItemWrap'}>\r\n                <div className=\"checkbox\">\r\n                    <input onChange={onChangeCheckbox} id={`${listItem}_${id}`} type=\"checkbox\" checked={isCompleted} />\r\n                    <label htmlFor={`${listItem}_${id}`}>\r\n                        <svg width=\"11\" height=\"8\" viewBox=\"0 0 11 8\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M9.29999 1.20001L3.79999 6.70001L1.29999 4.20001\"  stroke=\"#000\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                        </svg>\r\n                    </label>\r\n                </div>\r\n                { (visibleTaskInput &&\r\n                    <input  onChange={(e) => onChangeInputTask(e)} onBlur={changeInputToRedux} value={taskValue} className={'changeTaskInput'} autoFocus type=\"text\"/>) ||\r\n                    <p onDoubleClick={doubleClickOnTaskItem}>{task}</p>\r\n                }\r\n            </div>\r\n\r\n\r\n            <svg onClick={onClickDeleteTaskItem} className={'tasks__item__svg'} width=\"11\" height=\"11\" viewBox=\"0 0 11 11\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                <path d=\"M6.87215 5.5L10.7129 1.65926C10.8952 1.47731 10.9977 1.23039 10.9979 0.972832C10.9982 0.715276 10.8961 0.468178 10.7141 0.285898C10.5321 0.103617 10.2852 0.00108525 10.0277 0.000857792C9.77011 0.000630336 9.52302 0.102726 9.34074 0.284685L5.5 4.12542L1.65926 0.284685C1.47698 0.102404 1.22976 0 0.971974 0C0.714191 0 0.466965 0.102404 0.284685 0.284685C0.102404 0.466965 0 0.714191 0 0.971974C0 1.22976 0.102404 1.47698 0.284685 1.65926L4.12542 5.5L0.284685 9.34074C0.102404 9.52302 0 9.77024 0 10.028C0 10.2858 0.102404 10.533 0.284685 10.7153C0.466965 10.8976 0.714191 11 0.971974 11C1.22976 11 1.47698 10.8976 1.65926 10.7153L5.5 6.87458L9.34074 10.7153C9.52302 10.8976 9.77024 11 10.028 11C10.2858 11 10.533 10.8976 10.7153 10.7153C10.8976 10.533 11 10.2858 11 10.028C11 9.77024 10.8976 9.52302 10.7153 9.34074L6.87215 5.5Z\" fill=\"#E3E3E3\"/>\r\n            </svg>\r\n\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default TaskItem","import React from \"react\";\r\n\r\nconst EmptyTasks = () => {\r\n    return (\r\n        <div className={'emptyTasks'}>\r\n            <p>\r\n                Задачи отсутствуют\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EmptyTasks","import React, {useEffect, useState} from \"react\";\r\nimport './Tasks.scss'\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {checkTask, deleteTask, editItemList, editTask, setTasks} from \"../../Redux/Reducers/reducer\";\r\nimport EmptyTasks from \"./EmptyTasks\";\r\n\r\nconst Tasks = () => {\r\n\r\n    const [visibleInput, setVisibleInput] = useState(false)\r\n    const [visibleAddTaskBtn, setVisibleAddTaskBtn] = useState(true)\r\n    const [visibleSendTaskBtn, setVisibleSendTaskBtn] = useState(false)\r\n    const [inputValue, setInputValue] = useState('')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const activeListItem = useSelector(state => state.activeListItem)\r\n\r\n    const isShowAllTasks = useSelector(state => state.isShowAllTasks)\r\n    const allTasks = useSelector(state => state.showAllTasks)\r\n    const sidebarList = useSelector(state => state.items)\r\n\r\n\r\n    const tasksList = sidebarList[activeListItem] ? sidebarList[activeListItem].tasks : []\r\n    const titleName = sidebarList[activeListItem] ? sidebarList[activeListItem].name : 'Задачи отсутствуют'\r\n\r\n    const [titleNameInput, setTitleNameInput] = useState(titleName)\r\n    const [visibleTitleNameInput, setVisibleTitleNameInput] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setTitleNameInput(titleName)\r\n    }, [titleName])\r\n\r\n\r\n    const changeInputValue = (e) => {\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const onClickAddTask = (obj) => {\r\n        setVisibleInput(true)\r\n        setVisibleAddTaskBtn(false)\r\n        setVisibleSendTaskBtn(true)\r\n    }\r\n\r\n    const clickToDispatch = () => {\r\n        if(inputValue === '') {\r\n            alert('Заполните инпут')\r\n            return\r\n        }\r\n        const obj = {\r\n            listItem: activeListItem,\r\n            id: tasksList.length,\r\n            task: inputValue,\r\n            isCompleted: false\r\n        }\r\n        dispatch(setTasks(obj))\r\n\r\n        setVisibleSendTaskBtn(false)\r\n        setVisibleAddTaskBtn(true)\r\n        setVisibleInput(false)\r\n        setInputValue('')\r\n\r\n    }\r\n\r\n    const onClickCloseBtn = () => {\r\n        setVisibleSendTaskBtn(false)\r\n        setVisibleAddTaskBtn(true)\r\n        setVisibleInput(false)\r\n    }\r\n\r\n    const onCheckTask = (zxc) => {\r\n        const obj = {\r\n            taskId: zxc.id,\r\n            activeListItem,\r\n            wasRender: zxc.wasRender\r\n        }\r\n        dispatch(checkTask(obj))\r\n\r\n    }\r\n\r\n    const onDeleteTaskItem = (payload) => {\r\n\r\n        dispatch(deleteTask(payload))\r\n    }\r\n\r\n    const onEditTask = payload => {\r\n        dispatch(editTask(payload))\r\n    }\r\n\r\n    const onChangeTitleName = (e) => {\r\n        setTitleNameInput(e.target.value)\r\n    }\r\n\r\n    const openTitleNameInput = () => {\r\n        setVisibleTitleNameInput(true)\r\n    }\r\n\r\n    const sendTitleNameInputToRedux = () => {\r\n        const payload = {\r\n            id: sidebarList[activeListItem].id,\r\n            name: titleNameInput,\r\n            color: sidebarList[activeListItem].color,\r\n            tasks: sidebarList[activeListItem].tasks\r\n        }\r\n        console.log(payload)\r\n\r\n        dispatch(editItemList(payload))\r\n        setVisibleTitleNameInput(false)\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className={'todo__tasks'}>\r\n\r\n            <div className=\"tasks__title\">\r\n                { (visibleTitleNameInput &&\r\n                    <input value={titleNameInput} onChange={(e) => onChangeTitleName(e)} onBlur={sendTitleNameInputToRedux} className={'changeTaskInput'} autoFocus type=\"text\"/>) ||\r\n                <h2>{titleName}</h2>\r\n                }\r\n                { (activeListItem !== 0) &&\r\n                    <div onClick={openTitleNameInput}>\r\n                        <svg onClick={openTitleNameInput} width=\"15\" height=\"15\" viewBox=\"0 0 15 15\" fill=\"none\"\r\n                             xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path\r\n                                d=\"M0 12.0504V14.5834C0 14.8167 0.183308 15 0.41661 15H2.9496C3.05792 15 3.16624 14.9583 3.24123 14.875L12.34 5.78458L9.21542 2.66001L0.124983 11.7504C0.0416611 11.8338 0 11.9338 0 12.0504ZM14.7563 3.36825C14.8336 3.29116 14.8949 3.1996 14.9367 3.0988C14.9785 2.99801 15 2.88995 15 2.78083C15 2.6717 14.9785 2.56365 14.9367 2.46285C14.8949 2.36205 14.8336 2.27049 14.7563 2.19341L12.8066 0.24367C12.7295 0.166428 12.6379 0.105146 12.5372 0.0633343C12.4364 0.021522 12.3283 0 12.2192 0C12.1101 0 12.002 0.021522 11.9012 0.0633343C11.8004 0.105146 11.7088 0.166428 11.6318 0.24367L10.107 1.76846L13.2315 4.89304L14.7563 3.36825Z\"/>\r\n                        </svg>\r\n                    </div>\r\n                }\r\n\r\n\r\n\r\n            </div>\r\n\r\n            <div className=\"tasks__list\">\r\n\r\n                {  (isShowAllTasks && allTasks.length >= 1) ? allTasks.map((task, index) => <TaskItem data={task} key={'task_'+ index}\r\n                                                                               onCheckTask={onCheckTask} wasRender={task.listItem}\r\n                                                                                                      onDeleteTaskItem={onDeleteTaskItem}\r\n                                                                                                      onEditTask={onEditTask}/>) :\r\n\r\n                    (tasksList.length >= 1) ? tasksList.map((task, index) => <TaskItem data={task} key={'task_'+ index}\r\n                                                              onCheckTask={onCheckTask} wasRender={task.listItem}\r\n                                                                                       onDeleteTaskItem={onDeleteTaskItem}\r\n                                                                                       onEditTask={onEditTask}/>) :\r\n                     <EmptyTasks/>\r\n                }\r\n\r\n\r\n                { (visibleInput && activeListItem !== 0) &&\r\n                    <input onChange={ (e) => changeInputValue(e)} value={inputValue} className={'field newTaskInput'} type=\"text\" placeholder={'Текст задачи'}/>\r\n                }\r\n            </div>\r\n            <div className=\"newTask\">\r\n                { (visibleAddTaskBtn && sidebarList.length >1 && activeListItem !== 0) &&\r\n                    <button onClick={onClickAddTask}>\r\n                        <svg width=\"16\" height=\"16\" viewBox=\"0 0 16 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                            <path d=\"M8 1V15\" stroke=\"#B4B4B4\" strokeWidth=\"2\" strokeLinecap=\"round\"\r\n                                  strokeLinejoin=\"round\"/>\r\n                            <path d=\"M1 8H15\" stroke=\"#B4B4B4\" strokeWidth=\"2\" strokeLinecap=\"round\"\r\n                                  strokeLinejoin=\"round\"/>\r\n                        </svg>\r\n                        <p>Новая задача</p>\r\n                    </button>\r\n                }\r\n                {\r\n                    (visibleSendTaskBtn && activeListItem !== 0) &&\r\n                        <div className={'sendTaskBtn'}>\r\n                            <button onClick={clickToDispatch} className={'greenBtn'}>Добавить задачу</button>\r\n                            <button onClick={onClickCloseBtn} className={'grayBtn'}>Отмена</button>\r\n                        </div>\r\n                }\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Tasks","import React from 'react';\nimport Sidebar from \"./Components/Sidebar/Sidebar\";\nimport Tasks from \"./Components/Tasks/Tasks\";\n\n\nfunction App() {\n    return (\n        <div className={'todo'}>\n            <Sidebar/>\n            <Tasks/>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createStore} from \"redux\";\r\nimport {reducer} from \"./Reducers/reducer\";\r\n\r\n\r\nconst store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\r\n\r\n\r\nwindow.store = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport store from \"./Redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <BrowserRouter>\n              <App />\n          </BrowserRouter>\n      </Provider>\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}